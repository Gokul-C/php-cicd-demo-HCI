trigger:
  - main

resources:
  - repo: self

stages:
  - stage: Clone
    displayName: Clone
    jobs:
      - job: Clone
        timeoutInMinutes: 5
        displayName: Clone
        pool:
          name: Self-hosted
          demands:
            - agent.name -equals hci-vm
        steps:
          - script: |
              git clone https://github.com/Gokul-C/php-cicd-demo-HCI.git

  - stage: Sonarqube
    displayName: Sonarqube-Scan
    jobs:
      - job: Sonarqube
        timeoutInMinutes: 15
        displayName: 'Sonar Code Scan'
        pool:
          name: Self-hosted
          demands:
            - agent.name -equals hci-vm
        steps:
          - script: |
              sonar-scanner -Dsonar.projectKey=cicddemo -Dsonar.sources=/home/gokul-admin/runner/_work/3/s/webapp -Dsonar.host.url=http://10.21.10.6:9000 -Dsonar.login=sqp_4639108d205e4aabacbafc97fc10aa457323f16f -Dsonar.projectBaseDir=/home/gokul-admin/runner/_work/3/s/webapp

  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        timeoutInMinutes: 15
        displayName: Build
        pool:
          name: Self-hosted
          demands:
            - agent.name -equals hci-vm
        steps:
          - script: |
              docker build -t webapp:$(Build.BuildId) .
              docker tag webapp:$(Build.BuildId) gokulc780/webapp:$(Build.BuildId)
              docker push gokulc780/webapp:$(Build.BuildId)

  - stage: Trivy
    displayName: 'Trivy Conatiner Scan'
    jobs:
      - job: Trivy
        timeoutInMinutes: 15
        displayName: 'Trivy Conatiner Scan'
        pool:
          name: Self-hosted
          demands:
            - agent.name -equals hci-vm
        steps:
          - script: |
              trivy image -s "HIGH,CRITICAL" docker.io/gokulc780/webapp:$(Build.BuildId)

  - stage: Deploy
    displayName: 'Deploy to AKS'
    jobs:
      - job: Deploy
        timeoutInMinutes: 15
        displayName: 'Deploy to AKS'
        pool:
          name: Self-hosted
          demands:
            - agent.name -equals hci-vm
        steps:
          - script: |
              kubectl set image deployment/my-app webapp=webapp:$(Build.BuildId) -n dev-ci
              kubectl set image deployment/my-app webapp=webapp:$(Build.BuildId) -n prod-ci
